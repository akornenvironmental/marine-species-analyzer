<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>üêö Marine Species Text Analyzer</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            padding: 20px;
        }

        .container {
            max-width: 1200px;
            margin: 0 auto;
            background: white;
            border-radius: 20px;
            box-shadow: 0 20px 40px rgba(0, 0, 0, 0.1);
            overflow: hidden;
        }

        .header {
            background: linear-gradient(135deg, #4facfe 0%, #00f2fe 100%);
            color: white;
            padding: 40px;
            text-align: center;
        }

        .header h1 {
            font-size: 2.8rem;
            margin-bottom: 10px;
            text-shadow: 0 2px 4px rgba(0, 0, 0, 0.3);
        }

        .header p {
            font-size: 1.1rem;
            opacity: 0.9;
            margin: 5px 0;
        }

        .main-content {
            padding: 40px;
        }

        .section {
            margin-bottom: 40px;
            padding: 30px;
            background: #f8f9fa;
            border-radius: 15px;
            border-left: 5px solid #4facfe;
        }

        .section h3 {
            color: #333;
            margin-bottom: 15px;
            font-size: 1.5rem;
            display: flex;
            align-items: center;
            gap: 10px;
        }

        .upload-area {
            border: 3px dashed #4facfe;
            border-radius: 15px;
            padding: 60px;
            text-align: center;
            cursor: pointer;
            transition: all 0.3s ease;
            background: white;
            margin: 20px 0;
        }

        .upload-area:hover {
            border-color: #357abd;
            background: #f0f8ff;
            transform: translateY(-2px);
        }

        .upload-area.dragover {
            border-color: #28a745;
            background: #f0fff0;
            transform: scale(1.02);
        }

        .upload-icon {
            font-size: 3rem;
            margin-bottom: 15px;
        }

        .upload-text {
            margin-bottom: 20px;
        }

        .upload-text strong {
            font-size: 1.2rem;
            color: #333;
        }

        .upload-text p {
            color: #666;
            margin-top: 5px;
        }

        .file-input {
            display: none;
        }

        .btn {
            background: linear-gradient(135deg, #4facfe 0%, #00f2fe 100%);
            color: white;
            border: none;
            padding: 12px 24px;
            border-radius: 25px;
            cursor: pointer;
            font-size: 1rem;
            font-weight: 600;
            transition: all 0.3s ease;
            text-decoration: none;
            display: inline-block;
            margin: 5px;
        }

        .btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(79, 172, 254, 0.4);
        }

        .btn-secondary {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        }

        .btn-success {
            background: linear-gradient(135deg, #56ab2f 0%, #a8e6cf 100%);
        }

        .text-input {
            width: 100%;
            min-height: 200px;
            padding: 20px;
            border: 2px solid #e9ecef;
            border-radius: 10px;
            font-size: 14px;
            font-family: 'Courier New', monospace;
            resize: vertical;
            margin: 15px 0;
        }

        .text-input:focus {
            outline: none;
            border-color: #4facfe;
            box-shadow: 0 0 10px rgba(79, 172, 254, 0.3);
        }

        .results-section {
            margin-top: 30px;
            padding: 30px;
            background: white;
            border-radius: 15px;
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
        }

        .results-summary {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 20px;
            margin-bottom: 30px;
        }

        .summary-card {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            padding: 20px;
            border-radius: 10px;
            text-align: center;
        }

        .summary-card h4 {
            font-size: 2rem;
            margin-bottom: 5px;
        }

        .summary-card p {
            opacity: 0.9;
        }

        .species-list {
            display: grid;
            gap: 15px;
        }

        .species-item {
            background: #f8f9fa;
            border: 1px solid #e9ecef;
            border-radius: 10px;
            padding: 20px;
            transition: all 0.3s ease;
        }

        .species-item:hover {
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
            transform: translateY(-2px);
        }

        .species-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 15px;
        }

        .species-name {
            font-size: 1.2rem;
            font-weight: bold;
            color: #333;
            font-style: italic;
        }

        .species-common {
            color: #666;
            margin-top: 2px;
        }

        .status-badge {
            padding: 5px 12px;
            border-radius: 20px;
            font-size: 0.8rem;
            font-weight: bold;
            text-transform: uppercase;
        }

        .status-verified {
            background: #d4edda;
            color: #155724;
        }

        .status-partial {
            background: #fff3cd;
            color: #856404;
        }

        .status-not-found {
            background: #f8d7da;
            color: #721c24;
        }

        .species-details {
            margin-top: 15px;
            padding-top: 15px;
            border-top: 1px solid #e9ecef;
        }

        .species-details strong {
            color: #333;
        }

        .worms-link {
            display: inline-block;
            margin-top: 10px;
            color: #4facfe;
            text-decoration: none;
            font-weight: 600;
        }

        .worms-link:hover {
            text-decoration: underline;
        }

        .divider {
            text-align: center;
            margin: 25px 0;
            position: relative;
        }

        .divider::before {
            content: '';
            position: absolute;
            top: 50%;
            left: 0;
            right: 0;
            height: 1px;
            background: #e9ecef;
        }

        .divider span {
            background: white;
            padding: 0 20px;
            color: #666;
            font-weight: 600;
        }

        .sample-selector {
            margin: 15px 0;
        }

        .sample-selector select {
            width: 100%;
            padding: 10px;
            border: 2px solid #e9ecef;
            border-radius: 8px;
            font-size: 14px;
        }

        .api-status {
            background: #e3f2fd;
            border: 1px solid #90caf9;
            border-radius: 8px;
            padding: 15px;
            margin-bottom: 20px;
        }

        .api-status.offline {
            background: #ffebee;
            border-color: #ef9a9a;
        }

        .processing-message {
            background: #e3f2fd;
            border: 1px solid #90caf9;
            border-radius: 8px;
            padding: 15px;
            margin: 15px 0;
        }

        .processing-message.success {
            background: #e8f5e8;
            border-color: #4caf50;
        }

        .processing-message.error {
            background: #ffebee;
            border-color: #f44336;
        }

        .processing-message.warning {
            background: #fff3e0;
            border-color: #ff9800;
        }

        .export-section {
            margin-top: 30px;
            padding: 20px;
            background: #f8f9fa;
            border-radius: 10px;
        }

        .export-buttons {
            display: flex;
            gap: 10px;
            flex-wrap: wrap;
            margin-top: 15px;
        }

        .loading {
            display: inline-block;
            width: 20px;
            height: 20px;
            border: 3px solid #f3f3f3;
            border-top: 3px solid #4facfe;
            border-radius: 50%;
            animation: spin 1s linear infinite;
            margin-right: 10px;
        }

        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }

        .progress-bar {
            width: 100%;
            height: 6px;
            background: #e9ecef;
            border-radius: 3px;
            overflow: hidden;
            margin: 15px 0;
        }

        .progress-fill {
            height: 100%;
            background: linear-gradient(90deg, #4facfe, #00f2fe);
            width: 0%;
            transition: width 0.3s ease;
        }

        @media (max-width: 768px) {
            .container {
                margin: 10px;
                border-radius: 15px;
            }

            .header {
                padding: 30px 20px;
            }

            .header h1 {
                font-size: 2rem;
            }

            .main-content {
                padding: 20px;
            }

            .section {
                padding: 20px;
            }

            .upload-area {
                padding: 40px 20px;
            }

            .results-summary {
                grid-template-columns: 1fr;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>üêö Marine Species Text Analyzer</h1>
            <p>Professional species identification and verification tool</p>
            <p>Powered by WoRMS, GBIF, iNaturalist & OBIS databases</p>
        </div>

        <div class="main-content">
            <!-- API Status -->
            <div id="apiStatus" class="api-status">
                <strong>üîÑ System Status:</strong> <span id="statusText">‚úÖ Online - Database connections verified</span>
            </div>

            <!-- Input Section -->
            <div class="section">
                <h3>üìÅ PDF Upload & Text Input</h3>
                <p>Upload a PDF field guide or paste text containing marine species names:</p>
                
                <!-- PDF Upload Area -->
                <div class="upload-area" id="uploadArea">
                    <div class="upload-icon">üìÑ</div>
                    <div class="upload-text">
                        <strong>Drop PDF here or click to upload</strong>
                        <p>Supports PDF field guides, research papers, species lists</p>
                    </div>
                    <input type="file" id="pdfInput" class="file-input" accept=".pdf" multiple>
                    <button class="btn" onclick="document.getElementById('pdfInput').click()">üì§ Choose PDF File</button>
                </div>

                <div class="divider">
                    <span>OR</span>
                </div>

                <!-- Sample Data Selector -->
                <div class="sample-selector">
                    <label for="sampleSelect">Choose a sample dataset...</label>
                    <select id="sampleSelect">
                        <option value="">Select sample data</option>
                        <option value="nudibranch">Nudibranch Species (Northwest Mexico)</option>
                        <option value="fish">Common Marine Fish</option>
                        <option value="algae">Marine Algae Species</option>
                        <option value="mollusks">Mollusks of California</option>
                    </select>
                </div>

                <!-- Text Input -->
                <textarea id="textInput" class="text-input" placeholder="Paste your text containing marine species names here...

Example formats:
- Mytilus californianus
- 1. Strongylocentrotus purpuratus (Purple sea urchin)
- Haliotis rufescens Red abalone
- Scientific names in research papers
- Species lists from field guides"></textarea>

                <div style="text-align: center; margin-top: 20px;">
                    <button class="btn" id="analyzeBtn" onclick="analyzeText()">üîç Analyze Species</button>
                    <button class="btn btn-secondary" onclick="clearAll()">üóëÔ∏è Clear All</button>
                    <button class="btn btn-success" onclick="loadSample()">üìã Load Sample</button>
                </div>

                <!-- Progress Bar -->
                <div id="progressContainer" style="display: none;">
                    <div class="progress-bar">
                        <div class="progress-fill" id="progressBar"></div>
                    </div>
                    <p id="progressText" style="text-align: center; color: #666;"></p>
                </div>
            </div>

            <!-- Results Section -->
            <div id="resultsSection" class="section" style="display: none;">
                <h3>üìä Verification Results</h3>
                
                <div class="results-summary" id="resultsSummary">
                    <!-- Summary cards will be inserted here -->
                </div>

                <div class="species-list" id="speciesList">
                    <!-- Species items will be inserted here -->
                </div>

                <!-- Export Section -->
                <div class="export-section">
                    <h4>üìÅ Export Options</h4>
                    <div class="export-buttons">
                        <button class="btn" onclick="exportToCSV()">üìä Export CSV</button>
                        <button class="btn" onclick="exportToJSON()">üìã Export JSON</button>
                        <button class="btn" onclick="generateReport()">üìÑ Generate Report</button>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- PDF.js Library -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/pdf.js/3.11.174/pdf.min.js"></script>
    <script>
        // Configure PDF.js
        if (typeof pdfjsLib !== 'undefined') {
            pdfjsLib.GlobalWorkerOptions.workerSrc = 'https://cdnjs.cloudflare.com/ajax/libs/pdf.js/3.11.174/pdf.worker.min.js';
        }

        // Configuration
        const CONFIG = {
            WORMS_API: {
                BASE_URL: 'https://www.marinespecies.org/rest',
                RATE_LIMIT: 500,
                RETRY_DELAY: 1000,
                MAX_RETRIES: 3
            },
            GBIF_API: {
                BASE_URL: 'https://api.gbif.org/v1',
                RATE_LIMIT: 300
            },
            INATURALIST_API: {
                BASE_URL: 'https://api.inaturalist.org/v1',
                RATE_LIMIT: 200
            },
            OBIS_API: {
                BASE_URL: 'https://api.obis.org',
                RATE_LIMIT: 400
            }
        };

        // Global variables
        let analysisResults = [];
        let currentAnalysis = null;

        // Sample data
        const SAMPLE_DATA = {
            nudibranch: `Invertebrados Marinos del Noroeste de M√©xico 294 Eubranchidae 649. Eubranchus madapamensis (Rao, 1969) Madapam Aeolid Description: Body color translucent gray brown with brown-yellow, white, clear and dark spots and blotches. Bulbous cerata with tubercles; with a gold and a blue band distally, with 4-6 pinkish orange dots. Size: To 0.5 in. Habitat: Intertidal and shallow subtidal, to at least 30 ft. Distribution: Indo-Pacific, from Tanzania to Hawai'i; in eastern Pacific at Bah√≠a de los √Ångeles and Bah√≠a de Banderas. Remarks: Only recorded from two specimens in Mexican waters; genetic testing needs to be done to establish its identity. 650. Eubranchus steinbecki Behrens, 1987 Steinbeck's Aeolid Description: Irregular, nodular cerata; body color tan with dark olive-green mottling. Size: To 0.23 in. Habitat: Intertidal and on boat docks. Distribution: Palos Verdes and Mission Bay, California, and La Paz, Baja California Sur. Remarks: This rare aeolid is named in honor of Nobel Prize winner John Steinbeck. 651. Aeolidia loui Kienberger et al., 2016 Lou's Southern Aeolidia Description: Body covered with numerous bristly cerata; white, with cream white patches on dorsum, and cream white lines on the cerata. Rhinophores covered with irregular warts. Size: To about 1.2 in. Habitat: Intertidal and shallow subtidal. Distribution: Cape Arago, Oregon, to Punta Baja and northern Isla de Cedros, Baja California.`,
            
            fish: `Sebastes mystinus Blue rockfish
Sebastes melanops Black rockfish  
Sebastes pinniger Canary rockfish
Sebastes ruberrimus Yelloweye rockfish
Ophiodon elongatus Lingcod
Hexagrammos lagocephalus Rock greenling
Citharichthys sordidus Pacific sanddab
Platichthys stellatus Starry flounder
Embiotoca jacksoni Black perch
Cymatogaster aggregata Shiner perch`,

            algae: `Macrocystis pyrifera Giant kelp
Nereocystis luetkeana Bull kelp
Eisenia arborea Southern sea palm
Pterygophora californica Woody stemmed kelp
Laminaria setchellii Southern sugar wrack
Costaria costata Ribbed kelp
Alaria marginata Winged kelp
Lessoniopsis littoralis San Diego kelp
Cystoseira osmundacea Chain bladder kelp
Fucus gardneri Rockweed`,

            mollusks: `Haliotis rufescens Red abalone
Haliotis fulgens Green abalone
Mytilus californianus California mussel
Mytilus galloprovincialis Mediterranean mussel
Strongylocentrotus purpuratus Purple sea urchin
Strongylocentrotus franciscanus Red sea urchin
Pisaster ochraceus Purple sea star
Pisaster giganteus Giant sea star
Tegula funebralis Black turban snail
Chlorostoma brunnea Brown turban snail`
        };

        // Initialize the application
        document.addEventListener('DOMContentLoaded', function() {
            initializeApp();
            setupEventListeners();
            checkAPIStatus();
        });

        function initializeApp() {
            console.log('Marine Species Analyzer initialized');
            showProcessingMessage('Welcome! Ready to analyze marine species data.', 'success');
        }

        function setupEventListeners() {
            // File upload drag and drop
            const uploadArea = document.getElementById('uploadArea');
            const fileInput = document.getElementById('pdfInput');

            uploadArea.addEventListener('dragover', (e) => {
                e.preventDefault();
                uploadArea.classList.add('dragover');
            });

            uploadArea.addEventListener('dragleave', () => {
                uploadArea.classList.remove('dragover');
            });

            uploadArea.addEventListener('drop', (e) => {
                e.preventDefault();
                uploadArea.classList.remove('dragover');
                const files = e.dataTransfer.files;
                if (files.length > 0) {
                    handleFileUpload(files);
                }
            });

            uploadArea.addEventListener('click', () => {
                fileInput.click();
            });

            fileInput.addEventListener('change', async (e) => {
                if (e.target.files.length > 0) {
                    console.log('File selected:', e.target.files[0].name);
                    await handleFileUpload(e.target.files);
                }
            });

            // Sample selector
            document.getElementById('sampleSelect').addEventListener('change', function() {
                if (this.value) {
                    loadSampleData(this.value);
                }
            });
        }

        async function checkAPIStatus() {
            try {
                showProcessingMessage('Checking database connections...', 'info');
                
                // Test WoRMS API with a simple query
                const testResponse = await fetch(`${CONFIG.WORMS_API.BASE_URL}/AphiaRecordsByName/Mytilus?like=false&marine_only=true`);
                
                if (testResponse.ok) {
                    document.getElementById('statusText').innerHTML = '‚úÖ Online - Database connections verified';
                    document.getElementById('apiStatus').className = 'api-status';
                    showProcessingMessage('All systems ready!', 'success');
                } else {
                    throw new Error('API test failed');
                }
            } catch (error) {
                console.error('API Status Check Failed:', error);
                document.getElementById('statusText').innerHTML = '‚ùå Offline - Some features may be limited';
                document.getElementById('apiStatus').className = 'api-status offline';
                showProcessingMessage('Warning: Some databases may be temporarily unavailable.', 'warning');
            }
        }

        function handleFileUpload(files) {
            showProcessingMessage('PDF upload feature will be available in the full version. For now, please paste text directly.', 'warning');
        }

        function loadSample() {
            const selector = document.getElementById('sampleSelect');
            if (selector.value) {
                loadSampleData(selector.value);
            } else {
                showProcessingMessage('Please select a sample dataset first.', 'warning');
            }
        }

        function loadSampleData(dataType) {
            const textInput = document.getElementById('textInput');
            if (SAMPLE_DATA[dataType]) {
                textInput.value = SAMPLE_DATA[dataType];
                showProcessingMessage(`Sample data loaded: ${dataType}`, 'success');
            }
        }

        function clearAll() {
            document.getElementById('textInput').value = '';
            document.getElementById('sampleSelect').value = '';
            document.getElementById('resultsSection').style.display = 'none';
            analysisResults = [];
            showProcessingMessage('All data cleared.', 'info');
        }

        async function analyzeText() {
            const textInput = document.getElementById('textInput');
            const text = textInput.value.trim();

            if (!text) {
                showProcessingMessage('Please enter some text or load sample data first.', 'warning');
                return;
            }

            try {
                document.getElementById('analyzeBtn').disabled = true;
                document.getElementById('analyzeBtn').innerHTML = '<div class="loading"></div>Analyzing...';
                
                showProgress(0, 'Extracting species names...');
                
                // Extract species names from text
                const speciesNames = extractSpeciesNames(text);
                
                if (speciesNames.length === 0) {
                    showProcessingMessage('No valid species names found in the text. Please check the format.', 'warning');
                    return;
                }

                showProgress(20, `Found ${speciesNames.length} potential species. Verifying with databases...`);

                // Verify each species with databases
                const results = [];
                for (let i = 0; i < speciesNames.length; i++) {
                    const species = speciesNames[i];
                    showProgress(20 + (60 * (i / speciesNames.length)), `Verifying ${species.scientificName}...`);
                    
                    const verification = await verifySpeciesWithDatabases(species.scientificName);
                    results.push({
                        ...species,
                        verification: verification
                    });

                    // Add delay to respect rate limits
                    await delay(CONFIG.WORMS_API.RATE_LIMIT);
                }

                showProgress(90, 'Generating results...');

                analysisResults = results;
                displayResults(results);
                
                showProgress(100, 'Analysis complete!');
                setTimeout(() => {
                    document.getElementById('progressContainer').style.display = 'none';
                }, 2000);

            } catch (error) {
                console.error('Analysis error:', error);
                showProcessingMessage(`Analysis failed: ${error.message}`, 'error');
            } finally {
                document.getElementById('analyzeBtn').disabled = false;
                document.getElementById('analyzeBtn').innerHTML = 'üîç Analyze Species';
            }
        }

        function extractSpeciesNames(text) {
            const species = [];
            let matches = [];

            // Much more precise regex patterns for scientific names
            const patterns = [
                // Numbered entries: 649. Eubranchus madapamensis (Rao, 1969)
                /\b\d+\.\s*([A-Z][a-z]+)\s+([a-z]+)(?:\s+\([^)]+\))?/g,
                // Direct binomial with authority: Eubranchus madapamensis (Rao, 1969)
                /\b([A-Z][a-z]{3,})\s+([a-z]{4,})(?:\s+\([^)]+\))?/g,
                // Simple binomial: Genus species (minimum lengths to avoid false matches)
                /\b([A-Z][a-z]{3,})\s+([a-z]{4,})\b(?!\s+(?:and|or|the|in|of|to|from|with|by|for|at|on))/g
            ];

            patterns.forEach(pattern => {
                let match;
                const textCopy = text; // Work on a copy to avoid regex lastIndex issues
                pattern.lastIndex = 0; // Reset regex
                
                while ((match = pattern.exec(textCopy)) !== null) {
                    const genus = match[1];
                    const species = match[2];
                    const scientificName = `${genus} ${species}`;
                    
                    // Validate that this looks like a real scientific name
                    if (isValidScientificName(genus, species, scientificName)) {
                        if (!matches.some(m => m.scientificName === scientificName)) {
                            matches.push({
                                scientificName: scientificName,
                                genus: genus,
                                species: species,
                                rawText: match[0],
                                commonName: extractCommonName(text, match.index, scientificName)
                            });
                        }
                    }
                }
            });

            console.log(`Extracted ${matches.length} potential species:`, matches.map(m => m.scientificName));
            return matches.slice(0, 50); // Limit to 50 species for performance
        }

        function isValidScientificName(genus, species, fullName) {
            // Exclude obvious non-species terms
            const excludePatterns = [
                /^(Marine|Pacific|Atlantic|Ocean|Sea|North|South|East|West|The|This|Body|Color|Size|Habitat|Distribution|Description|Remarks)/i,
                /^(Only|Mexican|Prize|Verdes|Baja|Rhinophores|Bulbous|Intertidal|Covered|About|Irregular)/i,
                /^(mm|cm|in|ft|and|or|the|of|to|from|with|by|for|at|on|California|Mexico|Oregon)/i
            ];

            // Check if genus or species match exclude patterns
            for (const pattern of excludePatterns) {
                if (pattern.test(genus) || pattern.test(species) || pattern.test(fullName)) {
                    return false;
                }
            }

            // Genus should be capitalized, species lowercase
            if (genus[0] !== genus[0].toUpperCase() || species[0] !== species[0].toLowerCase()) {
                return false;
            }

            // Both should be reasonable lengths (3-20 characters)
            if (genus.length < 3 || genus.length > 20 || species.length < 4 || species.length > 20) {
                return false;
            }

            // Should only contain letters (no numbers or special characters)
            if (!/^[A-Za-z]+$/.test(genus) || !/^[A-Za-z]+$/.test(species)) {
                return false;
            }

            // Common non-species words that might slip through
            const commonWords = [
                'Marine Biology', 'Pacific Ocean', 'Sea Level', 'North America', 'South Pacific',
                'Body color', 'Size range', 'This rare', 'Only recorded', 'Mexican waters',
                'Prize winner', 'Verdes and', 'Baja and', 'Body covered', 'Rhinophores covered',
                'To about', 'Intertidal and'
            ];

            return !commonWords.includes(fullName);
        }

        function extractCommonName(rawText, scientificName) {
            // Try to extract common name from the context
            const afterScientific = rawText.replace(scientificName, '').trim();
            const commonNameMatch = afterScientific.match(/^[A-Z][a-z\s]+/);
            return commonNameMatch ? commonNameMatch[0].trim() : '';
        }

        async function verifySpeciesWithDatabases(scientificName) {
            const results = {
                worms: null,
                gbif: null,
                inaturalist: null,
                obis: null,
                confidence: 0,
                databases: []
            };

            try {
                // Verify with WoRMS (most authoritative for marine species)
                const wormsResult = await verifyWithWoRMS(scientificName);
                results.worms = wormsResult;
                if (wormsResult.success) {
                    results.confidence += 40;
                    results.databases.push('WoRMS');
                }

                await delay(200);

                // Verify with GBIF
                const gbifResult = await verifyWithGBIF(scientificName);
                results.gbif = gbifResult;
                if (gbifResult.success) {
                    results.confidence += 25;
                    results.databases.push('GBIF');
                }

                await delay(200);

                // Verify with iNaturalist
                const inatResult = await verifyWithiNaturalist(scientificName);
                results.inaturalist = inatResult;
                if (inatResult.success) {
                    results.confidence += 20;
                    results.databases.push('iNaturalist');
                }

                await delay(200);

                // Verify with OBIS
                const obisResult = await verifyWithOBIS(scientificName);
                results.obis = obisResult;
                if (obisResult.success) {
                    results.confidence += 15;
                    results.databases.push('OBIS');
                }

            } catch (error) {
                console.error(`Verification error for ${scientificName}:`, error);
                results.error = error.message;
            }

            return results;
        }

        async function verifyWithWoRMS(scientificName) {
            try {
                const cleanName = cleanScientificName(scientificName);
                const url = `${CONFIG.WORMS_API.BASE_URL}/AphiaRecordsByName/${encodeURIComponent(cleanName)}?like=false&marine_only=true`;
                
                console.log(`Querying WoRMS: ${url}`);
                
                const response = await fetch(url, {
                    method: 'GET',
                    headers: {
                        'Accept': 'application/json'
                    }
                });

                // Check if response is ok and has content
                if (!response.ok) {
                    if (response.status === 204 || response.status === 404) {
                        return { success: false, status: 'not_found', message: 'Species not found in WoRMS' };
                    }
                    throw new Error(`WoRMS API error: ${response.status} ${response.statusText}`);
                }

                // Check if response has content
                const contentLength = response.headers.get('content-length');
                if (contentLength === '0') {
                    return { success: false, status: 'not_found', message: 'No data returned from WoRMS' };
                }

                const responseText = await response.text();
                
                // Check if response is empty
                if (!responseText || responseText.trim() === '') {
                    return { success: false, status: 'not_found', message: 'Empty response from WoRMS' };
                }

                let data;
                try {
                    data = JSON.parse(responseText);
                } catch (parseError) {
                    console.error('JSON parse error:', parseError);
                    console.error('Response text:', responseText);
                    throw new Error('Invalid JSON response from WoRMS');
                }

                if (!data || data.length === 0) {
                    return { success: false, status: 'not_found', message: 'Species not found in WoRMS' };
                }

                const record = data[0];
                return {
                    success: true,
                    status: record.status === 'accepted' ? 'verified' : 'synonym',
                    data: {
                        aphiaId: record.AphiaID,
                        acceptedName: record.valid_name || record.scientificname,
                        status: record.status,
                        kingdom: record.kingdom || '',
                        phylum: record.phylum || '',
                        class: record.class || '',
                        order: record.order || '',
                        family: record.family || '',
                        genus: record.genus || '',
                        rank: record.rank || '',
                        author: record.authority || '',
                        modified: record.modified || '',
                        wormsUrl: `https://www.marinespecies.org/aphia.php?p=taxdetails&id=${record.AphiaID}`
                    }
                };
                
            } catch (error) {
                console.error('WoRMS verification error:', error);
                return { 
                    success: false, 
                    status: 'error', 
                    message: error.message,
                    error: error.message 
                };
            }
        }

        async function verifyWithGBIF(scientificName) {
            try {
                const cleanName = cleanScientificName(scientificName);
                const url = `${CONFIG.GBIF_API.BASE_URL}/species/match?name=${encodeURIComponent(cleanName)}`;
                
                const response = await fetch(url);
                
                if (!response.ok) {
                    throw new Error(`GBIF API error: ${response.status}`);
                }

                const data = await response.json();
                
                if (!data || data.matchType === 'NONE') {
                    return { success: false, status: 'not_found' };
                }

                return {
                    success: true,
                    status: data.matchType === 'EXACT' ? 'verified' : 'partial',
                    data: {
                        gbifId: data.usageKey,
                        acceptedName: data.canonicalName,
                        kingdom: data.kingdom,
                        phylum: data.phylum,
                        class: data.class,
                        order: data.order,
                        family: data.family,
                        genus: data.genus,
                        confidence: data.confidence,
                        matchType: data.matchType,
                        gbifUrl: `https://www.gbif.org/species/${data.usageKey}`
                    }
                };
                
            } catch (error) {
                console.error('GBIF verification error:', error);
                return { success: false, status: 'error', error: error.message };
            }
        }

        async function verifyWithiNaturalist(scientificName) {
            try {
                const cleanName = cleanScientificName(scientificName);
                const url = `${CONFIG.INATURALIST_API.BASE_URL}/taxa?q=${encodeURIComponent(cleanName)}&is_active=true&rank=species`;
                
                const response = await fetch(url);
                
                if (!response.ok) {
                    throw new Error(`iNaturalist API error: ${response.status}`);
                }

                const data = await response.json();
                
                if (!data.results || data.results.length === 0) {
                    return { success: false, status: 'not_found' };
                }

                const taxon = data.results[0];
                return {
                    success: true,
                    status: 'verified',
                    data: {
                        inatId: taxon.id,
                        name: taxon.name,
                        rank: taxon.rank,
                        observations: taxon.observations_count,
                        defaultPhoto: taxon.default_photo?.square_url,
                        inatUrl: `https://www.inaturalist.org/taxa/${taxon.id}`
                    }
                };
                
            } catch (error) {
                console.error('iNaturalist verification error:', error);
                return { success: false, status: 'error', error: error.message };
            }
        }

        async function verifyWithOBIS(scientificName) {
            try {
                const cleanName = cleanScientificName(scientificName);
                const url = `${CONFIG.OBIS_API.BASE_URL}/taxon/${encodeURIComponent(cleanName)}`;
                
                const response = await fetch(url);
                
                if (!response.ok) {
                    if (response.status === 404) {
                        return { success: false, status: 'not_found' };
                    }
                    throw new Error(`OBIS API error: ${response.status}`);
                }

                const data = await response.json();
                
                if (!data || !data.scientificName) {
                    return { success: false, status: 'not_found' };
                }

                return {
                    success: true,
                    status: 'verified',
                    data: {
                        scientificName: data.scientificName,
                        kingdom: data.kingdom,
                        phylum: data.phylum,
                        class: data.class,
                        order: data.order,
                        family: data.family,
                        genus: data.genus,
                        records: data.records,
                        obisUrl: `https://obis.org/taxon/${data.taxonID}`
                    }
                };
                
            } catch (error) {
                console.error('OBIS verification error:', error);
                return { success: false, status: 'error', error: error.message };
            }
        }

        function cleanScientificName(name) {
            return name
                .replace(/\([^)]*\)/g, '') // Remove parentheses and content
                .replace(/\d+\./g, '') // Remove numbers with dots
                .replace(/[^\w\s]/g, ' ') // Replace special characters with spaces
                .replace(/\s+/g, ' ') // Collapse multiple spaces
                .trim();
        }

        function delay(ms) {
            return new Promise(resolve => setTimeout(resolve, ms));
        }

        function showProgress(percentage, message) {
            const progressContainer = document.getElementById('progressContainer');
            const progressBar = document.getElementById('progressBar');
            const progressText = document.getElementById('progressText');
            
            progressContainer.style.display = 'block';
            progressBar.style.width = percentage + '%';
            progressText.textContent = message;
        }

        function showProcessingMessage(message, type = 'info') {
            const container = document.querySelector('.main-content');
            const existingMessage = container.querySelector('.processing-message');
            
            if (existingMessage) {
                existingMessage.remove();
            }

            const messageDiv = document.createElement('div');
            messageDiv.className = `processing-message ${type}`;
            messageDiv.innerHTML = message;
            
            container.insertBefore(messageDiv, container.firstChild);
            
            // Auto-hide success messages after 5 seconds
            if (type === 'success') {
                setTimeout(() => {
                    if (messageDiv.parentNode) {
                        messageDiv.remove();
                    }
                }, 5000);
            }
        }

        function displayResults(results) {
            const resultsSection = document.getElementById('resultsSection');
            const summary = document.getElementById('resultsSummary');
            const speciesList = document.getElementById('speciesList');

            // Calculate summary statistics
            const stats = {
                total: results.length,
                verified: results.filter(r => r.verification.worms?.success || r.verification.gbif?.success).length,
                partial: results.filter(r => r.verification.confidence > 0 && r.verification.confidence < 50).length,
                notFound: results.filter(r => r.verification.confidence === 0).length
            };

            // Display summary
            summary.innerHTML = `
                <div class="summary-card">
                    <h4>${stats.total}</h4>
                    <p>Total Species</p>
                </div>
                <div class="summary-card">
                    <h4>${stats.verified}</h4>
                    <p>Verified</p>
                </div>
                <div class="summary-card">
                    <h4>${stats.partial}</h4>
                    <p>Partial Match</p>
                </div>
                <div class="summary-card">
                    <h4>${stats.notFound}</h4>
                    <p>Not Found</p>
                </div>
            `;

            // Display species list
            speciesList.innerHTML = '';
            results.forEach(result => {
                const item = createSpeciesItem(result);
                speciesList.appendChild(item);
            });

            resultsSection.style.display = 'block';
            resultsSection.scrollIntoView({ behavior: 'smooth' });
        }

        function createSpeciesItem(result) {
            const div = document.createElement('div');
            div.className = 'species-item';

            // Determine status
            let statusText = 'Not Found';
            let statusBadgeClass = 'status-not-found';
            let detailsHTML = '';

            if (result.verification.worms?.success) {
                const data = result.verification.worms.data;
                statusText = data.status === 'accepted' ? 'Verified' : 'Synonym';
                statusBadgeClass = 'status-verified';
                
                detailsHTML = `
                    <div class="species-details">
                        ${data.acceptedName !== result.scientificName ? 
                            `<strong>Accepted Name:</strong> <em>${data.acceptedName}</em><br>` : ''}
                        <strong>WoRMS ID:</strong> ${data.aphiaId}<br>
                        <strong>Family:</strong> ${data.family || 'N/A'}<br>
                        <strong>Authority:</strong> ${data.author || 'N/A'}
                    </div>
                    <a href="${data.wormsUrl}" target="_blank" class="worms-link">View in WoRMS ‚Üí</a>
                `;
            } else if (result.verification.gbif?.success) {
                const data = result.verification.gbif.data;
                statusText = 'Partial Match';
                statusBadgeClass = 'status-partial';
                
                detailsHTML = `
                    <div class="species-details">
                        <strong>GBIF ID:</strong> ${data.gbifId}<br>
                        <strong>Match Type:</strong> ${data.matchType}<br>
                        <strong>Family:</strong> ${data.family || 'N/A'}
                    </div>
                    <a href="${data.gbifUrl}" target="_blank" class="worms-link">View in GBIF ‚Üí</a>
                `;
            }

            // Show database coverage
            const databases = result.verification.databases || [];
            const dbIndicators = `
                <div style="margin-top: 10px; font-size: 0.8rem;">
                    <strong>Database Confidence:</strong> ${result.verification.confidence}%<br>
                    <span style="color: ${databases.includes('WoRMS') ? 'green' : 'red'}">WoRMS ${databases.includes('WoRMS') ? '‚úì' : '‚úó'}</span>
                    <span style="color: ${databases.includes('GBIF') ? 'green' : 'red'}; margin-left: 10px;">GBIF ${databases.includes('GBIF') ? '‚úì' : '‚úó'}</span>
                    <span style="color: ${databases.includes('iNaturalist') ? 'green' : 'red'}; margin-left: 10px;">iNaturalist ${databases.includes('iNaturalist') ? '‚úì' : '‚úó'}</span>
                    <span style="color: ${databases.includes('OBIS') ? 'green' : 'red'}; margin-left: 10px;">OBIS ${databases.includes('OBIS') ? '‚úì' : '‚úó'}</span>
                </div>
            `;

            div.innerHTML = `
                <div class="species-header">
                    <div>
                        <div class="species-name">${result.scientificName}</div>
                        <div class="species-common">${result.commonName || ''}</div>
                    </div>
                    <span class="status-badge ${statusBadgeClass}">${statusText}</span>
                </div>
                ${detailsHTML}
                ${dbIndicators}
            `;

            return div;
        }

        // Export functions
        function exportToCSV() {
            if (analysisResults.length === 0) {
                showProcessingMessage('No data to export. Run an analysis first.', 'warning');
                return;
            }

            const csv = convertToCSV(analysisResults);
            downloadFile(csv, 'marine-species-analysis.csv', 'text/csv');
            showProcessingMessage('CSV file downloaded successfully!', 'success');
        }

        function exportToJSON() {
            if (analysisResults.length === 0) {
                showProcessingMessage('No data to export. Run an analysis first.', 'warning');
                return;
            }

            const json = JSON.stringify(analysisResults, null, 2);
            downloadFile(json, 'marine-species-analysis.json', 'application/json');
            showProcessingMessage('JSON file downloaded successfully!', 'success');
        }

        function generateReport() {
            if (analysisResults.length === 0) {
                showProcessingMessage('No data to generate report. Run an analysis first.', 'warning');
                return;
            }

            showProcessingMessage('Report generation feature coming soon!', 'info');
        }

        function convertToCSV(data) {
            const headers = [
                'Scientific Name',
                'Common Name',
                'WoRMS Status',
                'WoRMS ID',
                'GBIF Status',
                'GBIF ID',
                'iNaturalist Status',
                'OBIS Status',
                'Confidence',
                'Family',
                'Authority'
            ];

            const rows = data.map(item => [
                item.scientificName,
                item.commonName || '',
                item.verification.worms?.success ? 'Found' : 'Not Found',
                item.verification.worms?.data?.aphiaId || '',
                item.verification.gbif?.success ? 'Found' : 'Not Found',
                item.verification.gbif?.data?.gbifId || '',
                item.verification.inaturalist?.success ? 'Found' : 'Not Found',
                item.verification.obis?.success ? 'Found' : 'Not Found',
                item.verification.confidence + '%',
                item.verification.worms?.data?.family || item.verification.gbif?.data?.family || '',
                item.verification.worms?.data?.author || ''
            ]);

            return [headers, ...rows]
                .map(row => row.map(field => `"${field}"`).join(','))
                .join('\n');
        }

        function downloadFile(content, filename, contentType) {
            const blob = new Blob([content], { type: contentType });
            const url = window.URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.href = url;
            a.download = filename;
            document.body.appendChild(a);
            a.click();
            document.body.removeChild(a);
            window.URL.revokeObjectURL(url);
        }
    </script>
</body>
</html>
